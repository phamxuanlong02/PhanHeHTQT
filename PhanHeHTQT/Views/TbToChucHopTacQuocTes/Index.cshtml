@model IEnumerable<PhanHeHTQT.Models.TbToChucHopTacQuocTe>

@{
    ViewData["Title"] = "Index";
}


@section Heads {
    <link href="https://cdn.datatables.net/v/dt/jq-3.7.0/dt-2.1.7/r-3.0.3/datatables.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />

    <style>
        th, td {
            text-align: center; /* Canh giữa nội dung trong ô */
            vertical-align: middle; /* Căn giữa nội dung theo chiều dọc */
            font-family: Arial, sans-serif; /* Sử dụng font chữ Arial hoặc sans-serif */
        }

        h1, h3, h4 {
            text-align: center; /* Canh giữa tiêu đề */
        }

        body {
            background-image: url(https://upload.wikimedia.org/wikipedia/vi/8/85/Logo_hoc_vien_ANND.png); /* Đặt hình nền */
            background-size: 150px 150px; /* Kích thước hình nền */
            background-position: top right; /* Vị trí hình nền góc trên bên phải */
            background-repeat: no-repeat; /* Không lặp lại hình nền */
            background-color: rgba(128, 148, 219, 1); /* Màu nền mặc định */
            margin-bottom: 90px; /* Khoảng cách phía dưới */
            margin-top: 90px; /* Khoảng cách phía trên */
            color: #000; /* Màu chữ mặc định */
            font-family: Arial, sans-serif; /* Sử dụng font Arial */
        }

        .scrolling-text-container {
            width: 100%; /* Độ rộng toàn phần */
            height: 150px; /* Chiều cao container */
            overflow: hidden; /* Ẩn nội dung tràn ra ngoài */
            background-color: rgba(128, 148, 219, 0); /* Màu nền trong suốt */
            padding: 5px 0; /* Khoảng cách bên trong */
            margin-top: 20px; /* Khoảng cách trên container */
            white-space: nowrap; /* Không xuống dòng */
            position: relative; /* Thiết lập vị trí tương đối */
        }

        .scrolling-text {
            display: inline-block; /* Định dạng nội dung dạng khối ngang */
            color: #fff; /* Màu chữ trắng */
            font-size: 24px; /* Kích thước chữ */
            font-weight: bold; /* Chữ đậm */
            position: absolute; /* Vị trí tuyệt đối trong container */
            left: 100%; /* Bắt đầu ngoài khung nhìn */
            font-family: Arial, sans-serif; /* Sử dụng font Arial */
        }

        table {
            width: 100%; /* Chiều rộng toàn phần */
            border-collapse: collapse; /* Gộp viền bảng */
            background: linear-gradient(145deg, #e2ebf5, #d8e1ef); /* Màu nền dạng gradient */
            color: #000; /* Màu chữ mặc định */
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2); /* Đổ bóng bảng */
            border-radius: 30px; /* Bo tròn góc bảng */
            overflow: hidden; /* Ẩn nội dung tràn ra ngoài */
            margin: 20px auto; /* Căn giữa bảng */
        }

            table thead {
                background-color: #00263e; /* Màu nền tiêu đề bảng */
                color: #ffffff; /* Màu chữ tiêu đề bảng */
                text-transform: uppercase; /* Chuyển chữ thành chữ in hoa */
                font-weight: bold; /* Chữ in đậm */
            }

            table tbody tr {
                transition: transform 0.3s ease, background-color 0.3s ease; /* Hiệu ứng khi hover trên hàng */
            }

                table tbody tr:hover {
                    transform: scale(1.02); /* Phóng to hàng khi hover */
                    background-color: #cce7ff; /* Đổi màu nền hàng khi hover */
                }

            table td, table th {
                padding: 12px 15px; /* Khoảng cách bên trong ô */
                text-align: center; /* Canh giữa nội dung trong ô */
                border: 1px solid rgba(0, 0, 0, 0.1); /* Viền mỏng cho các ô */
            }

            table thead th:first-child {
                border-top-left-radius: 12px; /* Bo góc trên bên trái của ô đầu tiên */
            }

            table thead th:last-child {
                border-top-right-radius: 12px; /* Bo góc trên bên phải của ô cuối cùng */
            }

        #ntable {
            border: 2px solid #00263e; /* Viền ngoài bảng */
            padding: 0; /* Không có khoảng cách bên trong */
            background-color: white; /* Màu nền bảng */
        }

            #ntable thead th {
                color: #ffffff; /* Màu chữ trong tiêu đề bảng */
            }

            #ntable tbody td, a, i {
                color: black; /* Màu chữ trong nội dung bảng */
            }

                #ntable tbody td, a, i:hover {
                    color: black; /* Màu chữ khi hover */
                }

        .snowflake {
            position: absolute; /* Vị trí tuyệt đối */
            top: -10px; /* Bắt đầu từ trên */
            color: white; /* Màu trắng */
            font-size: 1em; /* Kích thước chữ */
            opacity: 0.8; /* Độ mờ */
            pointer-events: none; /* Không ảnh hưởng bởi sự kiện chuột */
        }

        .btn-header {
            background-color: rgba(0, 31, 63, 1); /* Màu nền nút */
            color: white; /* Màu chữ */
            padding: 10px 15px; /* Khoảng cách bên trong nút */
            border: none; /* Không viền */
            cursor: pointer; /* Con trỏ dạng bàn tay */
            font-size: 16px; /* Kích thước chữ */
            font-family: Arial, sans-serif; /* Sử dụng font Arial */
        }

            .btn-header:hover {
                background-color: rgba(0, 31, 63, 0.8); /* Đổi màu nền khi hover */
                color: white; /* Giữ màu chữ trắng khi hover */
            }

        .btn-excel:hover {
            background-color: limegreen; /* Màu nền nút khi hover */
        }

        div.dt-container .dt-search input {
            background-color: white; /* Đổi màu nền ô tìm kiếm */
        }

    </style>
}

<div class="scrolling-text-container">
    <!-- Vùng chứa văn bản cuộn ngang -->
    <div class="scrolling-text">
        <!-- Văn bản cuộn ngang -->
        <h1 font-size="40px">TỔ CHỨC HỢP TÁC QUỐC TẾ</h1>
        <!-- Tiêu đề chính -->
        <h3 font-size="15px">HỢP TÁC QUỐC TẾ</h3>
        <!-- Tiêu đề phụ -->
        <h4>Bạn đang có @Model.Count() tổ chức hợp tác quốc tế</h4>
        <!-- Nội dung hiển thị số lượng dự án từ dữ liệu mô hình. "@Model.Count()" sẽ được thay thế bằng số lượng thực tế trong quá trình xử lý -->
    </div>
</div>

<script>
        // Hiệu ứng chữ cuộn
        var scrollingText = document.querySelector('.scrolling-text');
        var container = document.querySelector('.scrolling-text-container');

        function startScrolling() {
        scrollingText.style.transition = 'none'; // Tắt hiệu ứng chuyển động ban đầu
        scrollingText.style.left = '100%'; // Đặt vị trí bắt đầu của chữ ngoài khung hiển thị
        var textWidth = scrollingText.offsetWidth; // Độ rộng của chữ
        var containerWidth = container.offsetWidth; // Độ rộng của khung
        var stopPosition = (containerWidth - textWidth) / 2; // Tính toán vị trí dừng
        setTimeout(function () {
            scrollingText.style.transition = 'left 10s linear'; // Hiệu ứng chuyển động mượt trong 10 giây
            scrollingText.style.left = stopPosition + 'px'; // Di chuyển đến vị trí dừng
        }, 100); // Đợi 100ms trước khi bắt đầu hiệu ứng
    }
    window.onload = startScrolling; // Kích hoạt hiệu ứng khi tải trang xong


        // Hiệu ứng xuất hiện cho bảng
        document.addEventListener("DOMContentLoaded", function () {
        const table = document.querySelector("table");
        table.style.opacity = "0"; // Bảng ban đầu bị ẩn
        table.style.transform = "translateY(50px)"; // Đặt vị trí ban đầu lệch xuống
        table.style.transition = "all 0.5s ease"; // Hiệu ứng mượt trong 0.5 giây

        setTimeout(() => {
            table.style.opacity = "1"; // Hiện bảng
            table.style.transform = "translateY(0)"; // Đưa bảng về vị trí ban đầu
        }, 300); // Đợi 300ms trước khi hiệu ứng bắt đầu
    });

</script>
<script>
    const snowflakes = [];
    const snowflakeCount = 50; // Số lượng tuyết cần tạo
    const createInterval = 100; // Tạo snowflake mới mỗi 100ms
    const updateInterval = 20; // Tốc độ cập nhật vị trí

    function createSnowflake() {
        const snowflake = document.createElement('div');
        snowflake.classList.add('snowflake');
        snowflake.textContent = '❄'; // Ký tự tuyết
        snowflake.style.left = Math.random() * window.innerWidth + 'px'; // Vị trí ngẫu nhiên
        snowflake.style.fontSize = Math.random() * 10 + 30 + 'px'; // Kích thước ngẫu nhiên
        snowflake.style.animationDuration = Math.random() * 3 + 2 + 's'; // Thời gian rơi ngẫu nhiên
        snowflake.style.animationDelay = Math.random() * 2 + 's'; // Thời gian trễ ngẫu nhiên
        snowflake.style.opacity = Math.random(); // Độ mờ ngẫu nhiên
        snowflake.style.position = 'absolute';
        snowflake.style.top = '-10px'; // Bắt đầu từ phía trên
        document.body.appendChild(snowflake);
        snowflakes.push(snowflake);

        // Xóa tuyết khi rơi xong
        setTimeout(() => {
            snowflake.remove();
        }, 5000); // Thời gian phải trùng với animation-duration lớn nhất
    }

    function updateSnowflakes() {
        for (let i = 0; i < snowflakes.length; i++) {
            const snowflake = snowflakes[i];
            const top = parseFloat(snowflake.style.top || -10);
            if (top > window.innerHeight) {
                snowflake.style.top = '-10px'; // Reset khi tuyết rơi xuống hết
                snowflake.style.left = Math.random() * window.innerWidth + 'px'; // Vị trí mới
            } else {
                snowflake.style.top = top + 1 + 'px';
            }
        }
    }

    // Tạo tuyết và cập nhật vị trí tuyết liên tục
    setInterval(createSnowflake, createInterval); // Tạo tuyết mới mỗi 100ms
    setInterval(updateSnowflakes, updateInterval); // Cập nhật vị trí tuyết mỗi 20ms
</script>
<table class="table" id="ntable">
    <thead>
        <tr>
            <th>STT</th>
            <th>
                @Html.DisplayNameFor(model => model.MaHopTac)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TenToChuc)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.NoiDung)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ThoiGianKyKet)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.KetQuaHopTac)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.LoaiToChuc)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.IdQuocGiaNavigation)
            </th>
            <th width="150px">Chức năng</th>
        </tr>
    </thead>
    @{
        int stt = 1;
    }
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@stt</td>
                <td>
                    @Html.DisplayFor(modelItem => item.MaHopTac)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TenToChuc)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.NoiDung)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ThoiGianKyKet)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.KetQuaHopTac)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LoaiToChuc)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.IdQuocGiaNavigation.TenNuoc)
                </td>
                <td>
                    <a href="@Url.Action("Edit", new { id = item.IdToChucHopTacQuocTe })" class="icon-link">
                        <i class="fas fa-edit" title="CHỈNH SỬA"></i>
                    </a> |
                    <a href="@Url.Action("Details", new { id = item.IdToChucHopTacQuocTe })" class="icon-link">
                        <i class="fas fa-info-circle" title="CHI TIẾT"></i>
                    </a> |
                    <a href="@Url.Action("Delete", new { id = item.IdToChucHopTacQuocTe })" class="icon-link">
                        <i class="fas fa-trash-alt" title="XÓA"></i>
                    </a>
                </td>
            </tr>
            stt++;
        }
    </tbody>
</table>
<div style="position: fixed; top: 0; right: 0; " id="notify">
</div>
@section Scripts {
    <script src="~/js/import_excel.js"></script> <!-- Tập lệnh xử lý nhập Excel -->
    <script src="~/js/xlsx.full.min.js"></script> <!-- Thư viện xử lý tệp Excel -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/pdfmake.min.js"></script> <!-- Hỗ trợ xuất PDF -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/vfs_fonts.js"></script> <!-- Font hỗ trợ PDF -->
    <script src="https://cdn.datatables.net/v/dt/jszip-3.10.1/dt-2.1.8/b-3.1.2/b-colvis-3.1.2/b-html5-3.1.2/b-print-3.1.2/datatables.min.js"></script> <!-- Thư viện DataTables -->
    <script>
        function notify(msg) {
            document.getElementById("notify").innerHTML = `
                                    <div class="alert alert-warning alert-dismissible fade show" role="alert">
                          ${msg}
                          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                            `;
        }
        var table = new DataTable("#ntable", {
            columnDefs: [
                {
                    orderable: false, //không cho phép sắp xếp
                    targets: -1   // Áp dụng cho cột cuối cùng
                }
            ],
            pageLength: 8, //số lượng mục hiển thị trên một trang
            language: {
                search: "Tìm kiếm",
                lengthMenu: "Hiển thị _MENU_ mục",
                info: "Hiển thị _START_ đến _END_ của _TOTAL_ mục",
                infoEmpty: "Không có dữ liệu để hiển thị",
                infoFiltered: "(được lọc từ _MAX_ mục)",
                loadingRecords: "Đang tải...",
                zeroRecords: "Không tìm thấy kết quả phù hợp",
                emptyTable: "Không có dữ liệu",
            }, //Tùy chỉnh ngôn ngữ tiếng việt
            createdRow: (row, data, index) => { },
            layout: {
                topStart: {
                    buttons: [
                        {
                            className: 'btn btn-header',
                            text: '<i class="fa-solid fa-plus" style="color: white"></i>Thêm tổ chức hợp tác quốc tế',
                            action: function (e, dt, node, config) {
                                window.location.href = '@Url.Action("Create")';
                            }
                        },
                        {
                            className: 'btn btn-header btn-download',
                            text: '<i class="fas fa-download me-2" style="color: white"></i>Danh Mục ID',
                            action: function (e, dt, node, config) {
                                // URL của file cần tải xuống
                                const fileUrl = '/xlsx/Danh Mục ID.xlsx';
                                // Tạo thẻ <a> để thực hiện tải file
                                const link = document.createElement('a');
                                link.href = fileUrl;
                                link.download = 'Danh Mục ID.xlsx'; // Tên file khi tải xuống
                                document.body.appendChild(link);
                                link.click();
                                document.body.removeChild(link);
                            }
                        },

                        {
                            className: 'btn btn-header btn-excel',
                            extend: 'excel',
                            text: '<i class="fas fa-file-export me-2" style="color: white"></i>Xuất Excel',
                            filename: function () {
                                const viewTitle = document.querySelector('h1').innerText.trim();
                                return viewTitle || 'Index';
                            },
                            title: null,
                            exportOptions: {
                                columns: ':not(:first-child):not(:last-child)',
                            }
                        },
                        {
                            className: 'btn btn-header btn-excel',
                            text: '<i class="fas fa-file-import me-2" style="color: white"></i>Nhập Excel',
                            action: function (e, dt, node, config) {
                                import_excel((json) => {
                                    let data = JSON.parse(json);
                                    let list = data['Sheet1'];
                                    let _ExcelNoSheet = [];
                                    for (let i = 0; i < list.length; ++i) {
                                        let arr = [];
                                        for (const [key, value] of Object.entries(list[i])) {
                                            arr.push(value.toString());
                                        }
                                        _ExcelNoSheet.push(arr);
                                    }
                                    let _json = JSON.stringify(_ExcelNoSheet, null, 4);
                                    console.log(_json);
                                    $.ajax({
                                        method: "post",
                                        url: "/TbToChucHopTacQuocTes/Receive",
                                        data: {
                                            "json": _json,
                                        },
                                        success: function (response) {
                                            // Code to execute if the request succeeds

                                            notify(`Success: ${response.value['msg']}`);
                                        },
                                        error: function (xhr, status, error) {
                                            // Code to execute if the request fails
                                            notify(`Error: ${xhr.responseJSON.value['msg']}`);

                                        }
                                    });
                                });
                            }
                        }
                    ]
                }
            }
        });
    </script>
}