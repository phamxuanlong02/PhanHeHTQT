@model IEnumerable<PhanHeHTQT.Models.TbGvduocCuDiDaoTao>
@using Newtonsoft.Json
@{
    ViewData["Title"] = "Statistics";
    string labelJson = "", dataJson = "";
    Dictionary<string, int> Times_Thu = new Dictionary<string, int>();
    foreach (var item in Model)
    {
        string hinhthuc = "";
        if (item.IdHinhThucThamGiaGvduocCuDiDaoTao.HasValue)
        {
            hinhthuc = item.IdHinhThucThamGiaGvduocCuDiDaoTaoNavigation.HinhThucThamGiaGvduocCuDiDaoTao;
        }
        if (Times_Thu.ContainsKey(hinhthuc)) ++Times_Thu[hinhthuc];
        else Times_Thu[hinhthuc] = 1;
    }
    List<string> label = new List<string>();
    List<int> data = new List<int>();
    foreach (var it in Times_Thu)
    {
        label.Add(it.Key);
        data.Add(it.Value);
    }
    labelJson = JsonConvert.SerializeObject(label);
    dataJson = JsonConvert.SerializeObject(data);

    string labelJson1 = "", dataJson1 = "";
    Dictionary<string, int> Times_Thu1 = new Dictionary<string, int>();
    foreach (var item in Model)
    {
        string nuoc = "";
        if (item.IdQuocGiaDen.HasValue)
        {
            nuoc = item.IdQuocGiaDenNavigation.TenNuoc;
        }
        if (Times_Thu1.ContainsKey(nuoc)) ++Times_Thu1[nuoc];
        else Times_Thu1[nuoc] = 1;
    }
    List<string> label1 = new List<string>();
    List<int> data1 = new List<int>();
    foreach (var it in Times_Thu1)
    {
        label1.Add(it.Key);
        data1.Add(it.Value);
    }
    labelJson1 = JsonConvert.SerializeObject(label1);
    dataJson1 = JsonConvert.SerializeObject(data1);

    string labelJson2 = "", dataJson2 = "";
    Dictionary<string, int> Times_Thu2 = new Dictionary<string, int>();
    foreach (var item in Model)
    {
        string tinhtrang = "";
        if (item.IdTinhTrangGvduocCuDiDaoTao.HasValue)
        {
            tinhtrang = item.IdTinhTrangGvduocCuDiDaoTaoNavigation.TinhTrangGiangVienDuocCuDiDaoTao;
        }
        if (Times_Thu2.ContainsKey(tinhtrang)) ++Times_Thu2[tinhtrang];
        else Times_Thu2[tinhtrang] = 1;
    }
    List<string> label2 = new List<string>();
    List<int> data2 = new List<int>();
    foreach (var it in Times_Thu2)
    {
        label2.Add(it.Key);
        data2.Add(it.Value);
    }
    labelJson2 = JsonConvert.SerializeObject(label2);
    dataJson2 = JsonConvert.SerializeObject(data2);

    string labelJson3 = "", dataJson3 = "";
    Dictionary<string, int> Times_Thu3 = new Dictionary<string, int>();
    foreach (var item in Model)
    {
        string nguon = "";
        if (item.IdNguonKinhPhiCuaGv.HasValue)
        {
            nguon = item.IdNguonKinhPhiCuaGvNavigation.NguonKinhPhiCuaGvduocCuDiDaoTao;
        }
        if (Times_Thu3.ContainsKey(nguon)) ++Times_Thu3[nguon];
        else Times_Thu3[nguon] = 1;
    }
    List<string> label3 = new List<string>();
    List<int> data3 = new List<int>();
    foreach (var it in Times_Thu3)
    {
        label3.Add(it.Key);
        data3.Add(it.Value);
    }
    labelJson3 = JsonConvert.SerializeObject(label3);
    dataJson3 = JsonConvert.SerializeObject(data3);
}

<h1>THỐNG KÊ</h1>

    <meta charset="utf-8">
    <title>Visualize Data Beautifully Using JS Charts</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.6.0/Chart.min.js"></script>   
    @section Heads{
    <style>
        th, td {
            text-align: center; /* Canh giữa nội dung trong ô */
            vertical-align: middle; /* Căn giữa nội dung theo chiều dọc */
            font-family: Arial, sans-serif; /* Sử dụng font chữ Arial hoặc sans-serif */
        }

        h1, h3, h4 {
            text-align: center; /* Canh giữa tiêu đề */
        }


        body {
            background-image: url(https://upload.wikimedia.org/wikipedia/vi/8/85/Logo_hoc_vien_ANND.png); /* Đặt hình nền */
            background-size: 150px 150px; /* Kích thước hình nền */
            background-position: top right; /* Đặt vị trí hình nền phía trên */
            background-repeat: no-repeat; /* Không lặp lại hình nền */
            background-color: rgba(128, 148, 219, 1); /* Màu nền mặc định */
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; /* Phông chữ */
            margin-bottom: 90px; /* Khoảng cách dưới cùng */
            margin-top: 90px; /* Khoảng cách trên cùng */
            padding: 0; /* Không có khoảng cách bên trong */
            color: #fff; /* Màu chữ */
        }

        h1 {
            color: white; /* Màu chữ của tiêu đề */
            text-align: center; /* Căn giữa tiêu đề */
            margin-top: 60px;
            margin-bottom: 20px; /* Khoảng cách dưới tiêu đề */
            text-transform: uppercase; /* Chuyển chữ thành in hoa */
            font-weight: bold; /* Chữ in đậm */
        }
        /* Phong cách cho nhãn */
        label {
            font-family: 'Arial', sans-serif;
            font-size: 22px;
            font-weight: bold;
            color: white;
            margin-bottom: 8px;
            display: inline-block;
        }

        /* Phong cách cho dropdown */
        #chartDropdown {
            width: 100%;
            max-width: 500px; /* Giới hạn chiều rộng */
            padding: 12px 16px;
            font-size: 16px;
            font-family: 'Arial', sans-serif;
            color: #333;
            background-color: #f9f9f9;
            border: 2px solid #ddd;
            border-radius: 8px; /* Bo tròn góc */
            outline: none;
            appearance: none; /* Ẩn mũi tên mặc định trên một số trình duyệt */
            cursor: pointer;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Hiệu ứng bóng */
            transition: all 0.3s ease;
        }

            /* Hiệu ứng hover */
            #chartDropdown:hover {
                background-color: #fff;
                border-color: #007BFF;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            }

            /* Hiệu ứng khi focus */
            #chartDropdown:focus {
                border-color: #007BFF;
                box-shadow: 0 0 8px rgba(0, 123, 255, 0.5);
            }

            /* Tùy chỉnh các tùy chọn trong dropdown */
            #chartDropdown option {
                padding: 10px;
                font-size: 14px;
                color: #333;
            }

        .chart-container {
            width: 100%;
            max-width: 1000px;
            margin: 40px auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); /* Tạo bóng cho container */
            display: flex;
            flex-direction: column;
            align-items: center;
        }

            .chart-container canvas {
                width: 100%; /* Đảm bảo biểu đồ chiếm toàn bộ chiều rộng */
                height: 500px; /* Chiều cao của biểu đồ */
            }
        /* Hiệu ứng cho tiêu đề */
        h1 {
            font-family: 'Arial', sans-serif;
            font-size: 40px;
            color: white;
            margin-bottom: 20px;
        }

        #myChart1 , #myChart3, #myChart5, #myChart7{
            height: 500px !important; /* Đặt chiều cao cụ thể cho biểu đồ */
        }

    </style>
    }

    <!-- Dropdown -->
    <label for="chartDropdown">Chọn biểu đồ để hiển thị:</label>
    <select id="chartDropdown" style="margin-bottom:100px">
        <option value="">-- Chọn biểu đồ --</option>
        <option value="chart1">Biểu đồ 1: CƠ CẤU HÌNH THỨC CỬ ĐI ĐÀO TẠO</option>
        <option value="chart2">Biểu đồ 2: THỐNG KÊ HÌNH THỨC CỬ ĐI ĐÀO TẠO</option>
        <option value="chart3">Biểu đồ 3: CƠ CẤU QUỐC GIA ĐƯỢC CỬ ĐẾN</option>
        <option value="chart4">Biểu đồ 4: THỐNG KÊ QUỐC GIA ĐƯỢC CỬ ĐẾN</option>
        <option value="chart5">Biểu đồ 5: CƠ CẤU TÌNH TRẠNG HỌC TẬP NGHIÊN CỨU</option>
        <option value="chart6">Biểu đồ 6: THỐNG KÊ TÌNH TRẠNG HỌC TẬP NGHIÊN CỨU</option>
        <option value="chart7">Biểu đồ 7: CƠ CẤU NGUỒN NGÂN SÁCH</option>
        <option value="chart8">Biểu đồ 8: THỐNG KÊ NGUỒN NGÂN SÁCH</option>

    </select>
    <!-- Biểu đồ 1 -->
    <div id="chart1" class="chart-container" style=" margin-bottom:100px">
        <canvas id="myChart1"></canvas>
    </div>

    <!-- Biểu đồ 2 -->
    <div id="chart2" class="chart-container" style=" margin-bottom:100px">
        <canvas id="myChart2"></canvas>
    </div>

    <!-- Biểu đồ 3 -->
    <div id="chart3" class="chart-container" style=" margin-bottom:100px">
        <canvas id="myChart3"></canvas>
    </div>
    <!-- Biểu đồ 4 -->
    <div id="chart4" class="chart-container" style="display:none; margin-bottom:100px">
        <canvas id="myChart4"></canvas>
    </div>
    <!-- Biểu đồ 5 -->
    <div id="chart5" class="chart-container" style=" margin-bottom:100px">
        <canvas id="myChart5"></canvas>
    </div>
    <!-- Biểu đồ 6 -->
    <div id="chart6" class="chart-container" style="display:none; margin-bottom:100px">
        <canvas id="myChart6"></canvas>
    </div>
    <!-- Biểu đồ 7 -->
    <div id="chart7" class="chart-container" style=" margin-bottom:100px">
        <canvas id="myChart7"></canvas>
    </div>
    <!-- Biểu đồ 8 -->
    <div id="chart8" class="chart-container" style="display:none; margin-bottom:100px">
        <canvas id="myChart8"></canvas>
    </div>
    <div class="popup">
        <div class="popup" style="margin-bottom:100px">
            <canvas id="myChart1"></canvas>
        </div>
    </div>
    <script>
        // Dữ liệu từ C#
        const labels = @Html.Raw(labelJson); //
        const data = @Html.Raw(dataJson);    //

        // Lấy phần tử canvas
        const ctx = document.getElementById('myChart1').getContext('2d');

        // Cấu hình biểu đồ
        const config = {
            type: 'pie',
            data: {
                labels: labels,
                datasets: [{
                    data: data,
                    backgroundColor: ['rgba(33, 150, 243, 0.8)', 'rgba(56, 142, 60, 0.8)', 'rgba(253, 216, 53, 0.8)', 'rgba(255, 87, 34, 0.8)', 'rgba(103, 58, 183, 0.8)', 'rgba(0, 188, 212, 0.8)', 'rgba(255, 64, 129, 0.8)', 'rgba(158, 158, 158, 0.8)', 'rgba(245, 34, 45, 0.8)', 'rgba(0, 150, 136, 0.8)', 'rgba(121, 85, 72, 0.8)', 'rgba(253, 216, 53, 0.8)', 'rgba(21, 101, 192, 0.8)', 'rgba(0, 105, 92, 0.8)', 'rgba(96, 125, 139, 0.8)'
                    ], borderWidth: 1
                }]
            },
            options: {
                title: {
                    display: true,
                    text: 'CƠ CẤU HÌNH THỨC CỬ ĐI ĐÀO TẠO',
                    fontSize: 25
                },
                maintainAspectRatio: false,// Để thu phóng tự do
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Biểu đồ phân loại theo ca'
                    }
                }
            }
        };

        // Vẽ biểu đồ
        new Chart(ctx, config);

    </script>


    <script>
        let myChart2 = document.getElementById('myChart2').getContext('2d');
        // Global Options
        Chart.defaults.global.defaultFontFamily = 'Lato';
        Chart.defaults.global.defaultFontSize = 18;
        Chart.defaults.global.defaultFontColor = '#777';

        let massPopChart2 = new Chart(myChart2, {
            type: 'bar', // bar, horizontalBar, pie, line, doughnut, radar, polarArea
            data: {
                labels: @Html.Raw(labelJson),
                datasets: [{
                    label: 'Lượt cử đi',
                    data: @Html.Raw(dataJson),
                    backgroundColor: (function () {
                        const dataArray = @Html.Raw(dataJson); // Chèn dữ liệu JavaScript từ Razor
                        return new Array(dataArray.length).fill('rgb(30,41,107)'); // Tạo mảng màu xanh với chiều dài tương ứng
                    })(),
                    borderWidth: 1,
                    borderColor: '#777',
                    hoverBorderWidth: 3,
                    hoverBorderColor: '#000',
                    barThickness: 10,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }],
                    xAxes: [{
                        ticks: {
                            autoSkip: false, // Hiển thị đầy đủ các nhãn
                            fontSize: 16, // Giảm kích thước font chữ
                            callback: function (value) {
                                // Chia nhãn thành các dòng dựa trên độ dài
                                let words = value.split(' '); // Tách nhãn thành mảng từ
                                let lines = [];
                                let line = '';
                                words.forEach(word => {
                                    if ((line + word).length > 25) { // Đặt giới hạn mỗi dòng là 15 ký tự
                                        lines.push(line.trim());
                                        line = '';
                                    }
                                    line += word + ' ';
                                });
                                if (line) lines.push(line.trim()); // Thêm dòng còn lại
                                return lines; // Trả về mảng dòng
                            }
                        }
                    }],
                },
                title: {
                    display: true,
                    text: 'THỐNG KÊ HÌNH THỨC CỬ ĐI ĐÀO TẠO',
                    fontSize: 25
                },
                legend: {
                    display: true,
                    position: 'right',
                    labels: {
                        fontColor: '#000'
                    }
                },
                layout: {
                    padding: {
                        left: 50,
                        right: 0,
                        bottom: 0,
                        top: 0
                    }
                },
                tooltips: {
                    enabled: true
                }
            }
        });
    </script>
    <script>
        // Dữ liệu từ C#
        const labels1 = @Html.Raw(labelJson1); //
        const data1 = @Html.Raw(dataJson1);    //

        // Lấy phần tử canvas
        const ctx1 = document.getElementById('myChart3').getContext('2d');

        // Cấu hình biểu đồ
        const config1 = {
            type: 'pie',
            data: {
                labels: labels1,
                datasets: [{
                    data: data1,
                    backgroundColor: ['rgba(33, 150, 243, 0.8)', 'rgba(56, 142, 60, 0.8)', 'rgba(253, 216, 53, 0.8)', 'rgba(255, 87, 34, 0.8)', 'rgba(103, 58, 183, 0.8)', 'rgba(0, 188, 212, 0.8)', 'rgba(255, 64, 129, 0.8)', 'rgba(158, 158, 158, 0.8)', 'rgba(245, 34, 45, 0.8)', 'rgba(0, 150, 136, 0.8)', 'rgba(121, 85, 72, 0.8)', 'rgba(253, 216, 53, 0.8)', 'rgba(21, 101, 192, 0.8)', 'rgba(0, 105, 92, 0.8)', 'rgba(96, 125, 139, 0.8)'
                    ], borderWidth: 1
                }]
            },
            options: {
                title: {
                    display: true,
                    text: 'CƠ CẤU QUỐC GIA ĐƯỢC CỬ ĐẾN',
                    fontSize: 25
                },
                maintainAspectRatio: false,// Để thu phóng tự do
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Biểu đồ phân loại theo ca'
                    }
                }
            }
        };

        // Vẽ biểu đồ
        new Chart(ctx1, config1);

    </script>


    <script>
        let myChart4 = document.getElementById('myChart4').getContext('2d');
        // Global Options
        Chart.defaults.global.defaultFontFamily = 'Lato';
        Chart.defaults.global.defaultFontSize = 18;
        Chart.defaults.global.defaultFontColor = '#777';

        let massPopChart4 = new Chart(myChart4, {
            type: 'bar', // bar, horizontalBar, pie, line, doughnut, radar, polarArea
            data: {
                labels: @Html.Raw(labelJson1),
                datasets: [{
                    label: 'Lượt cử đi',
                    data: @Html.Raw(dataJson1),
                    backgroundColor: (function () {
                        const dataArray = @Html.Raw(dataJson1); // Chèn dữ liệu JavaScript từ Razor
                        return new Array(dataArray.length).fill('rgb(30,41,107)'); // Tạo mảng màu xanh với chiều dài tương ứng
                    })(),
                    borderWidth: 1,
                    borderColor: '#777',
                    hoverBorderWidth: 3,
                    hoverBorderColor: '#000',
                    barThickness: 10,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }],
                    xAxes: [{
                        ticks: {
                            autoSkip: false, // Hiển thị đầy đủ các nhãn
                            fontSize: 16, // Giảm kích thước font chữ
                            callback: function (value) {
                                // Chia nhãn thành các dòng dựa trên độ dài
                                let words = value.split(' '); // Tách nhãn thành mảng từ
                                let lines = [];
                                let line = '';
                                words.forEach(word => {
                                    if ((line + word).length > 25) { // Đặt giới hạn mỗi dòng là 15 ký tự
                                        lines.push(line.trim());
                                        line = '';
                                    }
                                    line += word + ' ';
                                });
                                if (line) lines.push(line.trim()); // Thêm dòng còn lại
                                return lines; // Trả về mảng dòng
                            }
                        }
                    }],
                },
                title: {
                    display: true,
                    text: 'THỐNG KÊ QUỐC GIA ĐƯỢC CỬ ĐẾN',
                    fontSize: 25
                },
                legend: {
                    display: true,
                    position: 'right',
                    labels: {
                        fontColor: '#000'
                    }
                },
                layout: {
                    padding: {
                        left: 50,
                        right: 0,
                        bottom: 0,
                        top: 0
                    }
                },
                tooltips: {
                    enabled: true
                }
            }
        });
    </script>




    <script>
        // Dữ liệu từ C#
        const labels5 = @Html.Raw(labelJson2); //
        const data5 = @Html.Raw(dataJson2);    //

        // Lấy phần tử canvas
        const ctx5 = document.getElementById('myChart5').getContext('2d');

        // Cấu hình biểu đồ
        const config5 = {
            type: 'pie',
            data: {
                labels: labels5,
                datasets: [{
                    data: data5,
                    backgroundColor: ['rgba(33, 150, 243, 0.8)', 'rgba(56, 142, 60, 0.8)', 'rgba(253, 216, 53, 0.8)', 'rgba(255, 87, 34, 0.8)', 'rgba(103, 58, 183, 0.8)', 'rgba(0, 188, 212, 0.8)', 'rgba(255, 64, 129, 0.8)', 'rgba(158, 158, 158, 0.8)', 'rgba(245, 34, 45, 0.8)', 'rgba(0, 150, 136, 0.8)', 'rgba(121, 85, 72, 0.8)', 'rgba(253, 216, 53, 0.8)', 'rgba(21, 101, 192, 0.8)', 'rgba(0, 105, 92, 0.8)', 'rgba(96, 125, 139, 0.8)'
                    ], borderWidth: 1
                }]
            },
            options: {
                title: {
                    display: true,
                    text: 'CƠ CẤU TÌNH TRẠNG HỌC TẬP NGHIÊN CỨU',
                    fontSize: 25
                },
                maintainAspectRatio: false,// Để thu phóng tự do
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Biểu đồ phân loại theo ca'
                    }
                }
            }
        };

        // Vẽ biểu đồ
        new Chart(ctx5, config5);

    </script>

    <script>
        let myChart6 = document.getElementById('myChart6').getContext('2d');
        // Global Options
        Chart.defaults.global.defaultFontFamily = 'Lato';
        Chart.defaults.global.defaultFontSize = 18;
        Chart.defaults.global.defaultFontColor = '#777';

        let massPopChart6 = new Chart(myChart6, {
            type: 'bar', // bar, horizontalBar, pie, line, doughnut, radar, polarArea
            data: {
                labels: @Html.Raw(labelJson2),
                datasets: [{
                    label: 'Lượt cử đi',
                    data: @Html.Raw(dataJson2),
                    backgroundColor: (function () {
                        const dataArray = @Html.Raw(dataJson2); // Chèn dữ liệu JavaScript từ Razor
                        return new Array(dataArray.length).fill('rgb(30,41,107)'); // Tạo mảng màu xanh với chiều dài tương ứng
                    })(),
                    borderWidth: 1,
                    borderColor: '#777',
                    hoverBorderWidth: 3,
                    hoverBorderColor: '#000',
                    barThickness: 10,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }],
                    xAxes: [{
                        ticks: {
                            autoSkip: false, // Hiển thị đầy đủ các nhãn
                            fontSize: 16, // Giảm kích thước font chữ
                            callback: function (value) {
                                // Chia nhãn thành các dòng dựa trên độ dài
                                let words = value.split(' '); // Tách nhãn thành mảng từ
                                let lines = [];
                                let line = '';
                                words.forEach(word => {
                                if ((line + word).length > 12) { // Đặt giới hạn mỗi dòng là 15 ký tự
                                        lines.push(line.trim());
                                        line = '';
                                    }
                                    line += word + ' ';
                                });
                                if (line) lines.push(line.trim()); // Thêm dòng còn lại
                                return lines; // Trả về mảng dòng
                            }
                        }
                    }],
                },
                title: {
                    display: true,
                    text: 'THỐNG KÊ TÌNH TRẠNG HỌC TẬP NGHIÊN CỨU',
                    fontSize: 25
                },
                legend: {
                    display: true,
                    position: 'right',
                    labels: {
                        fontColor: '#000'
                    }
                },
                layout: {
                    padding: {
                        left: 50,
                        right: 0,
                        bottom: 0,
                        top: 0
                    }
                },
                tooltips: {
                    enabled: true
                }
            }
        });
    </script>
    <script>
        // Dữ liệu từ C#
        const labels7 = @Html.Raw(labelJson3); //
        const data7 = @Html.Raw(dataJson3);    //

        // Lấy phần tử canvas
        const ctx7 = document.getElementById('myChart7').getContext('2d');

        // Cấu hình biểu đồ
        const config7 = {
            type: 'pie',
            data: {
                labels: labels7,
                datasets: [{
                    data: data7,
                    backgroundColor: ['rgba(33, 150, 243, 0.8)', 'rgba(56, 142, 60, 0.8)', 'rgba(253, 216, 53, 0.8)', 'rgba(255, 87, 34, 0.8)', 'rgba(103, 58, 183, 0.8)', 'rgba(0, 188, 212, 0.8)', 'rgba(255, 64, 129, 0.8)', 'rgba(158, 158, 158, 0.8)', 'rgba(245, 34, 45, 0.8)', 'rgba(0, 150, 136, 0.8)', 'rgba(121, 85, 72, 0.8)', 'rgba(253, 216, 53, 0.8)', 'rgba(21, 101, 192, 0.8)', 'rgba(0, 105, 92, 0.8)', 'rgba(96, 125, 139, 0.8)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                title: {
                    display: true,
                    text: 'CƠ CẤU NGUỒN NHÂN SÁCH',
                    fontSize: 25
                },
                maintainAspectRatio: false,// Để thu phóng tự do
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Biểu đồ phân loại theo ca'
                    }
                }
            }
        };

        // Vẽ biểu đồ
        new Chart(ctx7, config7);

    </script>


    <script>
        let myChart8 = document.getElementById('myChart8').getContext('2d');
        // Global Options
        Chart.defaults.global.defaultFontFamily = 'Lato';
        Chart.defaults.global.defaultFontSize = 18;
        Chart.defaults.global.defaultFontColor = '#777';

        let massPopChart8 = new Chart(myChart8, {
            type: 'bar', // bar, horizontalBar, pie, line, doughnut, radar, polarArea
            data: {
                labels: @Html.Raw(labelJson3),
                datasets: [{
                    label: 'Lượt cử đi',
                    data: @Html.Raw(dataJson3),
                    backgroundColor: (function () {
                        const dataArray = @Html.Raw(dataJson3); // Chèn dữ liệu JavaScript từ Razor
                        return new Array(dataArray.length).fill('rgb(30,41,107)'); // Tạo mảng màu xanh với chiều dài tương ứng
                    })(),
                    borderWidth: 1,
                    borderColor: '#777',
                    hoverBorderWidth: 3,
                    hoverBorderColor: '#000',
                    barThickness: 10,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }],
                    xAxes: [{
                        ticks: {
                            autoSkip: false, // Hiển thị đầy đủ các nhãn
                            fontSize: 16, // Giảm kích thước font chữ
                            callback: function (value) {
                                // Chia nhãn thành các dòng dựa trên độ dài
                                let words = value.split(' '); // Tách nhãn thành mảng từ
                                let lines = [];
                                let line = '';
                                words.forEach(word => {
                                    if ((line + word).length > 25) { // Đặt giới hạn mỗi dòng là 15 ký tự
                                        lines.push(line.trim());
                                        line = '';
                                    }
                                    line += word + ' ';
                                });
                                if (line) lines.push(line.trim()); // Thêm dòng còn lại
                                return lines; // Trả về mảng dòng
                            }
                        }
                    }],
                },
                title: {
                    display: true,
                    text: 'THỐNG KÊ NGUỒN NGÂN SÁCH',
                    fontSize: 25
                },
                legend: {
                    display: true,
                    position: 'right',
                    labels: {
                        fontColor: '#000'
                    }
                },
                layout: {
                    padding: {
                        left: 50,
                        right: 0,
                        bottom: 0,
                        top: 0
                    }
                },
                tooltips: {
                    enabled: true
                }
            }
        });
    </script>

    <!-- code dropdown-->
    <script>
        // Lấy dropdown và các container biểu đồ
        const chartDropdown = document.getElementById('chartDropdown');
        const chartContainers = document.querySelectorAll('.chart-container');

        // Ẩn tất cả các biểu đồ khi tải lại trang
        window.addEventListener('DOMContentLoaded', function () {
            chartContainers.forEach(container => container.style.display = 'none');
        });

        // Lắng nghe sự kiện thay đổi trên dropdown
        chartDropdown.addEventListener('change', function () {
            // Ẩn tất cả các biểu đồ
            chartContainers.forEach(container => container.style.display = 'none');

            // Hiển thị biểu đồ được chọn
            const selectedChartId = chartDropdown.value;
            if (selectedChartId) {
                const selectedChart = document.getElementById(selectedChartId);
                if (selectedChart) {
                    selectedChart.style.display = 'block';
                }
            }
        });
    </script>